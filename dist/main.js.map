{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-snippet/add-snippet.component.css","webpack:///./src/app/add-snippet/add-snippet.component.html","webpack:///./src/app/add-snippet/add-snippet.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/build-cover-letter/build-cover-letter.component.css","webpack:///./src/app/build-cover-letter/build-cover-letter.component.html","webpack:///./src/app/build-cover-letter/build-cover-letter.component.ts","webpack:///./src/app/cover-letter/cover-letter.component.css","webpack:///./src/app/cover-letter/cover-letter.component.html","webpack:///./src/app/cover-letter/cover-letter.component.ts","webpack:///./src/app/database/database.component.css","webpack:///./src/app/database/database.component.html","webpack:///./src/app/database/database.component.ts","webpack:///./src/app/export/export.component.css","webpack:///./src/app/export/export.component.html","webpack:///./src/app/export/export.component.ts","webpack:///./src/app/has-keywords.pipe.ts","webpack:///./src/app/job-description/job-description.component.css","webpack:///./src/app/job-description/job-description.component.html","webpack:///./src/app/job-description/job-description.component.ts","webpack:///./src/app/nav/nav.component.css","webpack:///./src/app/nav/nav.component.html","webpack:///./src/app/nav/nav.component.ts","webpack:///./src/app/results/results.component.css","webpack:///./src/app/results/results.component.html","webpack:///./src/app/results/results.component.ts","webpack:///./src/app/services/cover-letter.service.ts","webpack:///./src/app/services/database.service.ts","webpack:///./src/app/services/parse-description.service.ts","webpack:///./src/app/services/status-message.service.ts","webpack:///./src/app/status-message/status-message.component.css","webpack:///./src/app/status-message/status-message.component.html","webpack:///./src/app/status-message/status-message.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"#snippet {\\r\\n    height:160px;\\r\\n}\"","module.exports = \"<div *ngIf=\\\"databaseService.connected\\\">\\r\\n\\r\\n  <h4>Add Snippet</h4>\\r\\n  <p>Enter a snippet from your cover letter that you feel is well articulated and communicates your experience well. Then fill out the categories (experiences, languages, skills) that relate to this cover letter.</p>\\r\\n  <textarea id=\\\"snippet\\\" ref-textarea [(ngModel)]=\\\"snippet\\\" placeholder=\\\"Copy/Paste a cover letter snippet here.\\\"></textarea>\\r\\n  <textarea ref-textarea [(ngModel)]=\\\"categories\\\" placeholder=\\\"Add your categories here, separated by a comma. eg. PHP, javascript, Node, mysql\\\"></textarea>\\r\\n  <button (click)=\\\"addSnippet()\\\">Submit Snippet</button>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { DatabaseService } from '../services/database.service';\r\n\r\n@Component({\r\n  selector: 'app-add-snippet',\r\n  templateUrl: './add-snippet.component.html',\r\n  styleUrls: ['./add-snippet.component.css']\r\n})\r\nexport class AddSnippetComponent implements OnInit {\r\n\r\n  snippet: String = '';\r\n  categories: String = '';\r\n\r\n  constructor(public databaseService: DatabaseService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  addSnippet() {\r\n    this.categories.replace(' ', '');\r\n    const categoriesArray = this.categories.split(',');\r\n    this.databaseService.addSnippet(this.snippet, categoriesArray);\r\n    this.snippet = '';\r\n    this.categories = '';\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n</div>\\n<app-nav></app-nav>\\n<div class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n  <!-- <app-database></app-database>\\n  <app-function-choice></app-function-choice> -->\\n</div>\\n<app-status-message></app-status-message>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Cover Letter Snippets';\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { JobDescriptionComponent } from './job-description/job-description.component';\r\nimport { DatabaseComponent } from './database/database.component';\r\nimport { ResultsComponent } from './results/results.component';\r\nimport { AddSnippetComponent } from './add-snippet/add-snippet.component';\r\nimport { StatusMessageComponent } from './status-message/status-message.component';\r\nimport { HasKeywordsPipe } from './has-keywords.pipe';\r\nimport { CoverLetterComponent } from './cover-letter/cover-letter.component';\r\nimport { BuildCoverLetterComponent } from './build-cover-letter/build-cover-letter.component';\r\nimport { ExportComponent } from './export/export.component';\r\nimport { NavComponent } from './nav/nav.component';\r\n\r\nimport { DatabaseService } from './services/database.service';\r\nimport { ParseDescriptionService } from './services/parse-description.service';\r\nimport { StatusMessageService } from './services/status-message.service';\r\nimport { CoverLetterService } from './services/cover-letter.service';\r\n\r\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\n\r\nconst appRoutes: Routes = [\r\n  { path: '', component: DatabaseComponent },\r\n  { path: 'add-snippet', component: AddSnippetComponent },\r\n  { path: 'build-cover-letter', component: BuildCoverLetterComponent },\r\n  { path: 'export-cover-letter', component: ExportComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    JobDescriptionComponent,\r\n    DatabaseComponent,\r\n    ResultsComponent,\r\n    AddSnippetComponent,\r\n    StatusMessageComponent,\r\n    HasKeywordsPipe,\r\n    CoverLetterComponent,\r\n    ExportComponent,\r\n    BuildCoverLetterComponent,\r\n    NavComponent\r\n  ],\r\n  imports: [\r\n    RouterModule.forRoot(\r\n      appRoutes,\r\n    ),\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    DatabaseService,\r\n    ParseDescriptionService,\r\n    StatusMessageService,\r\n    CoverLetterService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  schemas: [\r\n    CUSTOM_ELEMENTS_SCHEMA\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<app-job-description *ngIf=\\\"!parseDescriptionService.showParsingResults\\\"></app-job-description>\\r\\n\\r\\n<div *ngIf=\\\"parseDescriptionService.showParsingResults\\\">\\r\\n  <app-results ></app-results>\\r\\n  <div class=\\\"line-break\\\"></div>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"coverLetterService.addedSnippets.length > 0\\\">\\r\\n  <app-cover-letter></app-cover-letter>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\n\nimport { ParseDescriptionService } from '../services/parse-description.service';\nimport { StatusMessageService } from '../services/status-message.service';\nimport { DatabaseService } from '../services/database.service';\nimport { CoverLetterService } from '../services/cover-letter.service';\n\n@Component({\n  selector: 'app-build-cover-letter',\n  templateUrl: './build-cover-letter.component.html',\n  styleUrls: ['./build-cover-letter.component.css']\n})\nexport class BuildCoverLetterComponent implements OnInit {\n\n  constructor(\n    public parseDescriptionService: ParseDescriptionService,\n    public coverLetterService: CoverLetterService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"#cover-letter-table thead td:first-child {\\r\\n    width:70%;\\r\\n}\\r\\n\\r\\n#cover-letter-table thead td:nth-child(2) {\\r\\n    max-width:15%;\\r\\n}\\r\\n\\r\\n#cover-letter-table thead td:nth-child(3) {\\r\\n    max-width:15%;\\r\\n}\"","module.exports = \"<!-- <div class=\\\"table-container\\\" *ngIf=\\\"coverLetterService.addedSnippets.length > 0\\\"> -->\\n<h4>Organize Snippets and Export:</h4>\\n<div class=\\\"table-container\\\">\\n  <table id=\\\"cover-letter-table\\\">\\n    <thead>\\n      <tr>\\n        <td>Snippet</td>\\n        <td>Remove</td>\\n        <td>Reorganize</td>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let snippet of coverLetterService.addedSnippets; let i = index\\\">\\n        <td>{{snippet.snippet}}</td>\\n        <td><a (click)=\\\"coverLetterService.removeSnippet(i)\\\">Remove</a></td>\\n        <td>\\n          <p><a (click)=\\\"coverLetterService.moveSnippet(i,true)\\\" *ngIf=\\\"i !== 0\\\">Move Up</a></p>\\n          <p><a (click)=\\\"coverLetterService.moveSnippet(i,false)\\\" *ngIf=\\\"i !== coverLetterService.addedSnippets.length - 1\\\">Move Down</a></p>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n<button [routerLink]=\\\"['/export-cover-letter']\\\" (click)=\\\"compile()\\\">Export and Tweak Cover Letter</button>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { CoverLetterService } from '../services/cover-letter.service';\nimport { StatusMessageService } from '../services/status-message.service';\n\n@Component({\n  selector: 'app-cover-letter',\n  templateUrl: './cover-letter.component.html',\n  styleUrls: ['./cover-letter.component.css']\n})\nexport class CoverLetterComponent implements OnInit {\n\n  constructor(public coverLetterService:CoverLetterService,\n  private statusMessasageService:StatusMessageService) { }\n\n  ngOnInit() {\n  }\n\n  compile() {\n    let exportedCoverLetter = \"\";\n    for (let i = 0; i < this.coverLetterService.addedSnippets.length; i++) {\n      exportedCoverLetter += this.coverLetterService.addedSnippets[i].snippet;\n      exportedCoverLetter += \"\\n\\n\";\n    }\n    this.coverLetterService.exported = exportedCoverLetter;\n    this.statusMessasageService.newStatusMessage('Exporting Cover Letter to final edit!','success');\n  }\n\n}\n","module.exports = \".table-container {\\r\\n    max-height: 300px;\\r\\n}\\r\\n\\r\\n#database-table thead td:first-child {\\r\\n    width:60%;\\r\\n}\\r\\n\\r\\n#database-table thead td:nth-child(2) {\\r\\n    width:25%;\\r\\n}\\r\\n\\r\\n#database-table thead td:nth-child(3) {\\r\\n    width:15%;\\r\\n}\\r\\n\\r\\n.snippet-edit {\\r\\n  display:none;\\r\\n}\\r\\n\\r\\n.categories-edit {\\r\\n  display:none;\\r\\n}\\r\\n\"","module.exports = \"<div *ngIf=\\\"!databaseService.connected\\\">\\r\\n  <h4 id=\\\"json-title\\\">Use JSON File:</h4>\\r\\n  <p>\\r\\n    Click here to store/pull data from a local JSON file.\\r\\n  </p>\\r\\n  <button (click)=\\\"connectJson()\\\">Connect to JSON File</button>\\r\\n\\r\\n  <br>\\r\\n\\r\\n  <h4 id=\\\"db-title\\\">Connect your Database:</h4>\\r\\n  <p>\\r\\n    Paste your MongoDB url here with credentials and we will connect to your database.\\r\\n    For instructions on how to create a cloud-hosted database, <a href=\\\"https://github.com/mattcheah/cover-letter-snippets#setting-up-a-database\\\">visit the README</a>.\\r\\n  </p>\\r\\n  <p>The database string here is a test sandbox for anyone to use. Please play nice.</p>\\r\\n  <input [(ngModel)]=\\\"databaseString\\\"/><br>\\r\\n  <button [ngClass]=\\\"{inactive: databaseString == ''}\\\" (click)=\\\"connect(databaseString)\\\">Connect to Database</button>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"databaseService.showDatabase\\\">\\r\\n  <p>Your Snippets Database has {{databaseService.database.length}} entries.</p>\\r\\n  <p><small>Click to Edit</small></p>\\r\\n  <div class=\\\"table-container\\\">\\r\\n\\r\\n    <table id=\\\"database-table\\\">\\r\\n      <thead>\\r\\n        <tr>\\r\\n          <td>Snippet</td>\\r\\n          <td>Categories</td>\\r\\n          <!-- <td>Edit</td> -->\\r\\n          <td>Delete</td>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr [id]=\\\"'snippet-'+snippet._id\\\" *ngFor=\\\"let snippet of databaseService.database\\\">\\r\\n          <td (click)=\\\"toggleEditSnippet(snippet)\\\" >\\r\\n            <div class=\\\"snippet no-edit\\\" style=\\\"display:block\\\">\\r\\n              {{snippet.snippet}}\\r\\n            </div>\\r\\n            <textarea  [(ngModel)]=\\\"editSnippetObject ? editSnippetObject.snippet : snippet.snippet\\\" class=\\\"snippet-edit editable\\\" (keydown)=\\\"snippetEdited = true\\\" (keyup.enter)=\\\"saveEdit(editSnippetObject)\\\" style=\\\"display:none\\\">\\r\\n            </textarea>\\r\\n          </td>\\r\\n          <td (click)=\\\"toggleEditCategories(snippet)\\\" >\\r\\n            <div class=\\\"categories no-edit\\\" style=\\\"display:block\\\">\\r\\n              {{snippet.categories}}\\r\\n            </div>\\r\\n            <input [(ngModel)]=\\\"editSnippetObject ? editSnippetObject.categories : snippet.categories\\\" class=\\\"categories-edit editable\\\" value=\\\"{{editSnippetObject ? editSnippetObject.categories : ''}}\\\" (keydown)=\\\"snippetEdited = true\\\" (keyup.enter)=\\\"saveEdit(editSnippetObject)\\\" style=\\\"display:none\\\">\\r\\n          </td>\\r\\n          <!-- <td><a (click)=\\\"deleteRecord(snippet.id)\\\">Edit</a></td> -->\\r\\n          <td class=\\\"delete\\\"><a (click)=\\\"deleteRecord(snippet._id)\\\">Delete</a></td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { DatabaseService } from '../services/database.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-database',\r\n  templateUrl: './database.component.html',\r\n  styleUrls: ['./database.component.css']\r\n})\r\nexport class DatabaseComponent implements OnInit {\r\n\r\n  showConnectForm = true;\r\n  databaseString = 'mongodb://user:testtest1@ds119660.mlab.com:19660/snippets-sandbox';\r\n\r\n  editSnippetObject;\r\n  editingCategory = false;\r\n  snippetEdited = false;\r\n\r\n  constructor(public databaseService: DatabaseService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  connectJson(jsonString: string): void {\r\n    this.databaseService.startConnection(true, jsonString);\r\n  }\r\n\r\n  connect(connectString: string): void {\r\n    // console.log(\"connecting to mongoose db: response is:\");\r\n    this.databaseService.startConnection(false, connectString);\r\n  }\r\n\r\n  toggleEditSnippet(snippet): void {\r\n    console.log('===================== START');\r\n    console.log('clicked on new snippet:');\r\n    console.log(snippet);\r\n\r\n    if (!this.editSnippetObject || snippet._id !== this.editSnippetObject._id || this.editingCategory) {\r\n      console.log('no current editing object or we\\'re switching objects')\r\n      this.editingCategory = false;\r\n\r\n      if (this.editSnippetObject) {\r\n        console.log('We are switching objects and we need to save and flush');\r\n        this.saveEdit(this.editSnippetObject);\r\n      }\r\n\r\n      console.log('lets display the editable box');\r\n      this.editSnippetObject = snippet;\r\n      const snippetLabel: HTMLElement = document.querySelector('#snippet-' + snippet._id + ' .snippet');\r\n      const snippetEdit: HTMLElement = document.querySelector('#snippet-' + snippet._id + ' .snippet-edit');\r\n\r\n      snippetLabel.style.display = 'none';\r\n      snippetEdit.style.display = 'block';\r\n    }\r\n    console.log('================================ END');\r\n  }\r\n\r\n  toggleEditCategories(snippet): void {\r\n    if (!this.editSnippetObject || snippet._id !== this.editSnippetObject._id || !this.editingCategory) {\r\n      console.log('no current editing object or we\\'re switching objects')\r\n      this.editingCategory = true;\r\n\r\n      if (this.editSnippetObject) {\r\n        console.log('We are switching objects and we need to save and flush');\r\n        this.saveEdit(this.editSnippetObject);\r\n      }\r\n\r\n      console.log('lets display the editable box');\r\n      this.editSnippetObject = snippet;\r\n      const categoriesLabel: HTMLElement = document.querySelector('#snippet-' + snippet._id + ' .categories');\r\n      const categoriesEdit: HTMLElement = document.querySelector('#snippet-' + snippet._id + ' .categories-edit');\r\n\r\n      categoriesLabel.style.display = 'none';\r\n      categoriesEdit.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  toggleOffEditing(): void {\r\n\r\n    if (this.editSnippetObject) {\r\n      this.editSnippetObject = undefined;\r\n\r\n      const noEdits = document.getElementsByClassName('no-edit') as HTMLCollectionOf<HTMLElement>;\r\n      const edits = document.getElementsByClassName('editable') as HTMLCollectionOf<HTMLElement>;\r\n\r\n      for (let i = 0; i < edits.length; i++) {\r\n        edits[i].style.display = 'none';\r\n      }\r\n      for (let j = 0; j < noEdits.length; j++) {\r\n        noEdits[j].style.display = 'block';\r\n      }\r\n    }\r\n  }\r\n\r\n  saveEdit(snippet): void {\r\n\r\n    const newSnip: HTMLInputElement = document.querySelector('#snippet-' + snippet._id + ' .snippet-edit');\r\n    const newCat: HTMLInputElement = document.querySelector('#snippet-' + snippet._id + ' .categories-edit');\r\n\r\n    snippet.snippet = newSnip.value;\r\n    snippet.categories = newCat.value;\r\n    if (this.snippetEdited) {\r\n      console.log('SNIPPET WAS EDITED. WE\\'RE SAVING BROS');\r\n      if (typeof snippet.categories === 'string') {\r\n        snippet.categories.replace(' ', '');\r\n        snippet.categories = snippet.categories.split(',');\r\n      }\r\n      this.databaseService.editSnippet(snippet._id, snippet.snippet, snippet.categories);\r\n      this.snippetEdited = false;\r\n    }\r\n    this.toggleOffEditing();\r\n  }\r\n\r\n  deleteRecord(id) {\r\n    // console.log(\"delete id: \"+id);\r\n    this.databaseService.deleteSnippet(id);\r\n  }\r\n\r\n\r\n\r\n}\r\n","module.exports = \"textarea {\\r\\n  height:500px;\\r\\n}\\r\\n\"","module.exports = \"<div id=\\\"export-container\\\">\\n  <h4 id=\\\"export-title\\\">Exported Cover Letter:</h4>\\n  <p>You may edit your cover letter, and copy/paste it from here to whatever medium you are using to apply for jobs.</p>\\n  <textarea [(ngModel)]=\\\"coverLetterService.exported\\\"></textarea>\\n  <p>Need to edit something? Click the button below to go back.</p>\\n  <p>WARNING: Any changes you made in this text form will not be saved!</p>\\n  <button [routerLink]=\\\"['/build-cover-letter']\\\" (click)=\\\"statusMessageService.clearStatus()\\\">Go Back to Building Cover Letter</button>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CoverLetterService } from '../services/cover-letter.service';\nimport { StatusMessageService } from '../services/status-message.service';\n\n@Component({\n  selector: 'app-export',\n  templateUrl: './export.component.html',\n  styleUrls: ['./export.component.css']\n})\nexport class ExportComponent implements OnInit {\n\n  constructor(\n    public coverLetterService:CoverLetterService,\n    public statusMessageService:StatusMessageService\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'hasKeywords'\n})\nexport class HasKeywordsPipe implements PipeTransform {\n\n  transform(value: Array<any>, args?: any): any {\n    // Only return categories if there is at least 1 keyword in the job description\n    return value.filter(cat => cat.jobKeywords > 0);\n  }\n\n}\n","module.exports = \"#keyword-results-table-container {\\r\\n    max-height:160px;\\r\\n}\\r\\n\\r\\n/* #keyword-results-table thead td, #filtered-snippets-table thead td {\\r\\n    font-size:14px;\\r\\n    color:white;\\r\\n} */\\r\\n\\r\\n#keyword-results-table tbody td {\\r\\n    font-size:10px;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"","module.exports = \"\\n<h4>Job Description</h4>\\n<p>Enter the job description here, and Snippets will parse it in order to find the keywords (skills, experience, languages) that match previous cover letter information that you have written.</p>\\n<textarea ref-textarea [(ngModel)]=\\\"descriptionContent\\\" placeholder=\\\"Copy/Paste a job description here\\\" ></textarea>\\n<button (click)=\\\"submitDescription(descriptionContent)\\\">Parse Job Description</button>\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ParseDescriptionService } from '../services/parse-description.service';\r\nimport { StatusMessageService } from '../services/status-message.service';\r\n\r\n@Component({\r\n  selector: 'app-job-description',\r\n  templateUrl: './job-description.component.html',\r\n  styleUrls: ['./job-description.component.css']\r\n})\r\nexport class JobDescriptionComponent implements OnInit {\r\n\r\n  descriptionContent:string;\r\n\r\n  constructor(\r\n    private parseDescriptionService:ParseDescriptionService,\r\n    private statusMessageService:StatusMessageService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  submitDescription(description):void {\r\n    this.parseDescriptionService.parseDescription(description);\r\n  }\r\n\r\n  enterNewDescription():void {\r\n    this.descriptionContent = \"\";\r\n    this.parseDescriptionService.showParsingResults = false;\r\n    this.statusMessageService.newStatusMessage(\"Resetting Job Description\", \"warning\");\r\n  }\r\n\r\n}\r\n","module.exports = \"ul {\\r\\n  list-style-type: none;\\r\\n}\\r\\n\\r\\nli a {\\r\\n  color:#b0ccea;\\r\\n}\\r\\n\\r\\nli .is-active {\\r\\n  color:white;\\r\\n  font-weight:700;\\r\\n}\\r\\n\\r\\nli .disabled {\\r\\n  cursor:not-allowed !important;\\r\\n  color:#555 !important;\\r\\n  text-decoration:none;\\r\\n}\\r\\n\\r\\n/* .is-active {\\r\\n  color:#7ca0c5;\\r\\n} */\\r\\n\"","module.exports = \"<ul class=\\\"flex\\\">\\n  <li><a [routerLink]=\\\"['']\\\" [routerLinkActive]=\\\"['is-active']\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\">Database</a></li>\\n\\n  <li *ngIf=\\\"databaseService.connected\\\"><a [routerLink]=\\\"['add-snippet']\\\" [routerLinkActive]=\\\"['is-active']\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\" [ngClass]=\\\"{disabled: !databaseService.connected}\\\">Add Snippets</a></li>\\n  <li *ngIf=\\\"!databaseService.connected\\\"><a class=\\\"disabled\\\">Add Snippets</a></li>\\n\\n  <li *ngIf=\\\"databaseService.connected\\\"><a [routerLink]=\\\"['build-cover-letter']\\\" [routerLinkActive]=\\\"['is-active']\\\" [routerLinkActiveOptions]=\\\"{ exact: true }\\\">Build Cover Letter</a></li>\\n  <li *ngIf=\\\"!databaseService.connected\\\"><a class=\\\"disabled\\\">Build Cover Letter</a></li>\\n\\n  <li *ngIf=\\\"coverLetterService.addedSnippets.length != 0\\\"><a [routerLink]=\\\"['export-cover-letter']\\\" [routerLinkActive]=\\\"['is-active']\\\">Export Cover Letter</a></li>\\n  <li *ngIf=\\\"coverLetterService.addedSnippets.length == 0\\\"><a  class=\\\"disabled\\\">Export Cover Letter</a></li>\\n</ul>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DatabaseService } from '../services/database.service';\nimport { CoverLetterService } from '../services/cover-letter.service';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.css']\n})\nexport class NavComponent implements OnInit {\n\n  coverLetterLinkDisabled:boolean = (this.coverLetterService.addedSnippets.length == 0);\n\n  constructor(\n    public databaseService:DatabaseService,\n    public coverLetterService:CoverLetterService\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"#filtered-snippets-table thead td:first-child {\\r\\n    width:75%;\\r\\n}\\r\\n\\r\\n#filtered-snippets-table thead td:nth-child(2) {\\r\\n    max-width:25%;\\r\\n}\\r\\n\\r\\nbutton {\\r\\n  margin: 0 auto;\\r\\n  display: block;\\r\\n}\\r\\n\\r\\n#intro-outro {\\r\\n  margin:20px 0\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"results\\\">\\n\\n  <div class=\\\"line-break\\\"></div>\\n\\n  <div class=\\\"flex\\\">\\n    <button (click)=\\\"enterNewDescription()\\\">Enter new job description</button>\\n  </div>\\n\\n  <div class=\\\"line-break\\\"></div>\\n\\n  <h4 id=\\\"results-title\\\">Results for the job description:</h4>\\n  <small>{{parseDescriptionService.jobDescription.substring(0,200)}}...</small>\\n\\n  <div id=\\\"keyword-results-table-container\\\" class=\\\"table-container\\\">\\n    <table id=\\\"keyword-results-table\\\">\\n      <thead>\\n        <tr>\\n          <td>Category/Keyword:</td>\\n          <td>Times Mentioned:</td>\\n          <td>Show snippets for Category</td>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let keyword of parseDescriptionService.keywordArray | hasKeywords\\\">\\n          <td>{{ keyword.keyword }}</td>\\n          <td>{{ keyword.jobKeywords }}</td>\\n          <td>\\n            <a (click)=\\\"displaySnippets(keyword.keyword)\\\">Show Snippets</a>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n\\n  <div id=\\\"intro-outro\\\" class=\\\"flex\\\">\\n    <button (click)=\\\"displaySnippets('intro')\\\">Show Intros</button>\\n    <button (click)=\\\"displaySnippets('outro')\\\">Show Outros</button>\\n  </div>\\n\\n  <div *ngIf=\\\"showFilteredSnippetsTable\\\">\\n    <div class=\\\"line-break\\\"></div>\\n\\n    <h4 id=\\\"snippets-from-category\\\">Snippets from Category: {{ displayedCategory }}</h4>\\n    <div id=\\\"filtered-snippets-table-container\\\" class=\\\"table-container\\\" >\\n      <table id=\\\"filtered-snippets-table\\\">\\n        <thead>\\n          <tr>\\n            <td>Snippet</td>\\n            <!-- <td>Categories</td> -->\\n            <td>Add to Letter</td>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let snippet of filteredSnippets\\\">\\n            <td class=\\\"snippet\\\">{{snippet.snippet}}</td>\\n            <!-- <td class=\\\"categories\\\">{{snippet.categories}}</td> -->\\n            <td class=\\\"add\\\" (click)=\\\"coverLetterService.addSnippet(snippet)\\\">\\n              <a>Add</a>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\\n\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ParseDescriptionService } from '../services/parse-description.service';\nimport { StatusMessageService } from '../services/status-message.service';\nimport { DatabaseService } from '../services/database.service';\nimport { CoverLetterService } from '../services/cover-letter.service';\n\n@Component({\n  selector: 'app-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.css']\n})\nexport class ResultsComponent implements OnInit {\n\n  filteredSnippets: Array<any>;\n  displayedCategory = '';\n  showFilteredSnippetsTable = false;\n\n  constructor(\n    public parseDescriptionService: ParseDescriptionService,\n    public coverLetterService: CoverLetterService,\n    private databaseService: DatabaseService,\n    private statusMessageService: StatusMessageService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  displaySnippets(keyword): void {\n    this.filteredSnippets = [];\n    const snippets = this.databaseService.database;\n    for (let i = 0; i < snippets.length; i++) {\n      if (snippets[i].categories.includes(keyword)) { this.filteredSnippets.push(snippets[i]); }\n    }\n    this.displayedCategory = keyword;\n    this.showFilteredSnippetsTable = true;\n    this.statusMessageService.newStatusMessage('Displaying Snippets from category: ' + keyword, 'primary');\n  }\n\n  enterNewDescription() {\n    this.filteredSnippets = [];\n    this.showFilteredSnippetsTable = false;\n    this.parseDescriptionService.showParsingResults = false;\n    this.parseDescriptionService.jobDescription = '';\n    this.parseDescriptionService.keywordArray = [];\n    this.statusMessageService.newStatusMessage('Resetting Job Description', 'warning');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { StatusMessageService } from '../services/status-message.service';\n\n\n@Injectable()\nexport class CoverLetterService {\n\n  addedSnippets: Array<any> = [];\n  exported = '';\n\n  constructor(private statusMessageService: StatusMessageService) { }\n\n  addSnippet(snippet) {\n    for (let i = 0; i < this.addedSnippets.length; i++) {\n      if (this.addedSnippets[i]._id === snippet._id) {\n        return;\n      }\n    }\n\n    this.addedSnippets.push(snippet);\n    this.statusMessageService.newStatusMessage('Added Snippet to the Cover Letter', 'primary');\n  }\n\n  moveSnippet(index, up): void {\n    const temp = this.addedSnippets[index];\n    const swapIndex = up ? -1 : 1;\n    this.addedSnippets[index] = this.addedSnippets[index + swapIndex];\n    this.addedSnippets[index + swapIndex] = temp;\n  }\n\n  removeSnippet(index): void {\n    this.addedSnippets.splice(index, 1);\n  this.statusMessageService.newStatusMessage('Removed Snippet from Cover Letter', 'primary');\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { StatusMessageService } from './status-message.service';\r\n\r\nexport interface DatabaseResponse {\r\n  responseMessage: string;\r\n  connected: boolean;\r\n  data: Array<{}>;\r\n  error: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class DatabaseService {\r\n\r\n  isJson: boolean;\r\n  database: Array<any>;\r\n  connected = false;\r\n  showDatabase = false;\r\n  categories: any = {};\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private statusMessageService: StatusMessageService,\r\n  ) { }\r\n\r\n  startConnection(isJson = true, urlString = 'snippets-db.json'): void {\r\n    const self = this;\r\n    const dataObj = JSON.stringify({ databaseUrl: urlString });\r\n    const options = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n      })\r\n    };\r\n    const url = isJson ? 'api/get-json-data' : 'api/connect-to-database';\r\n    self.isJson = isJson;\r\n\r\n    this.http.post<DatabaseResponse>(url, dataObj, options)\r\n      .pipe(retry(2), catchError(this.handleError)\r\n    ).subscribe(response => {\r\n      if (response.connected && !response.error) {\r\n        self.database = response.data;\r\n        self.statusMessageService.newStatusMessage(response.responseMessage, 'success');\r\n        self.connected = true;\r\n        self.showDatabase = true;\r\n\r\n        if (self.database.length > 0) {\r\n          self.extractCategories();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  addSnippet(snippet, categories): void {\r\n    const self = this;\r\n    const data = {snippet: snippet, categories: categories};\r\n    const options = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n      })\r\n    };\r\n\r\n    const url = self.isJson ? 'api/add-json-snippet' : 'api/add-snippet';\r\n\r\n    this.http.post<DatabaseResponse>(url, JSON.stringify(data), options)\r\n      .pipe(retry(2), catchError(this.handleError)\r\n    ).subscribe(returnData => {\r\n      if (returnData.connected) {\r\n        self.statusMessageService.newStatusMessage(returnData.responseMessage, 'success');\r\n        self.database = returnData.data;\r\n        self.extractCategories();\r\n      } else if (returnData.error) {\r\n        self.statusMessageService.newStatusMessage(returnData.responseMessage, 'error');\r\n      }\r\n    });\r\n  }\r\n\r\n  editSnippet(id, snippet, categories): void {\r\n    const self = this;\r\n    const url = self.isJson ? 'api/edit-json-snippet' : 'api/edit-snippet';\r\n    const data = { id: id, snippet: snippet, categories: categories };\r\n    const options = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n      })\r\n    };\r\n\r\n    this.http.put<DatabaseResponse>(url, JSON.stringify(data), options)\r\n    .pipe(retry(2), catchError(this.handleError)\r\n    ).subscribe(returnData => {\r\n      if (returnData.connected && !returnData.error) {\r\n        self.statusMessageService.newStatusMessage(returnData.responseMessage, 'success');\r\n        self.database = returnData.data;\r\n        self.extractCategories();\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteSnippet(id): void {\r\n    const self = this;\r\n    const data = {id: id};\r\n    const url = self.isJson ? 'api/delete-json-snippet' : 'api/delete-snippet';\r\n    const options = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n      }),\r\n      body: JSON.stringify(data)\r\n    };\r\n\r\n    this.http.delete<DatabaseResponse>(url, options)\r\n      .pipe(retry(2), catchError(this.handleError)\r\n      ).subscribe(returnData => {\r\n        if (returnData.connected && !returnData.error) {\r\n          self.statusMessageService.newStatusMessage(returnData.responseMessage, 'success');\r\n          self.database = returnData.data;\r\n          self.extractCategories();\r\n        }\r\n      });\r\n  }\r\n\r\n  private extractCategories(): void {\r\n    this.categories = {};\r\n    for (let i = 0; i < this.database.length; i++) {\r\n      const record = this.database[i];\r\n      for (let j = 0; j < record.categories.length; j++) {\r\n        const category = record.categories[j];\r\n        if (!(category in this.categories)) {\r\n          this.categories[category] = {\r\n            ids: [],\r\n            jobKeywords: 0\r\n          };\r\n        }\r\n        this.categories[category].ids.push(record);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    console.log('error obj: ');\r\n    console.log(error);\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.error('Error: ', error.error.message);\r\n      this.statusMessageService.newStatusMessage('There was a network error with your request: ' + error.error.message, 'error');\r\n    } else {\r\n      console.error(`Backend returned code ${error.status}`);\r\n      console.error(`Error Body: ${error.error}`);\r\n      this.statusMessageService.newStatusMessage('There was a server error with your request: ' + error.error, 'error');\r\n    }\r\n    return throwError('error from throwerror');\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { DatabaseService } from './database.service';\r\nimport { StatusMessageService } from './status-message.service';\r\n\r\n@Injectable()\r\nexport class ParseDescriptionService {\r\n\r\n  jobDescription = '';\r\n  showParsingResults = false;\r\n  keywordArray: Array<{}>;\r\n\r\n  constructor(private databaseService: DatabaseService, private statusMessageService: StatusMessageService) { }\r\n\r\n  parseDescription(description): any {\r\n    this.resetJobKeywords();\r\n    this.jobDescription = description;\r\n\r\n    const descriptionWords = description.split(/\\W/);\r\n\r\n    for (let i = 0; i < descriptionWords.length; i++) {\r\n      const word = descriptionWords[i].toLowerCase();\r\n      if (word in this.databaseService.categories) {\r\n        this.databaseService.categories[word].jobKeywords++;\r\n      }\r\n    }\r\n\r\n    this.keywordArray = this.createOrderedArray();\r\n    this.showParsingResults = true;\r\n\r\n  }\r\n\r\n  resetJobKeywords(): void {\r\n    const keywords = Object.keys(this.databaseService.categories);\r\n    for (let i = 0; i < keywords.length; i++) {\r\n      this.databaseService.categories[keywords[i]].jobKeywords = 0;\r\n    }\r\n  }\r\n\r\n  createOrderedArray(): Array<{}> {\r\n    const keywords = Object.keys(this.databaseService.categories);\r\n    const keywordsArray = [];\r\n    for (let i = 0; i < keywords.length; i++) {\r\n      this.databaseService.categories[keywords[i]].keyword = keywords[i];\r\n      keywordsArray.push(this.databaseService.categories[keywords[i]]);\r\n    }\r\n\r\n    function quicksortByJobKeywords(arr, left, right) {\r\n      if (left < right) {\r\n        const divider = divide(arr, left, right);\r\n        quicksortByJobKeywords(arr, left, divider - 1);\r\n        quicksortByJobKeywords(arr, divider + 1, right);\r\n      }\r\n      return arr;\r\n    }\r\n\r\n    function divide(arr, left, right) {\r\n      let dividerIndex = left;\r\n      const pivot = right;\r\n\r\n      for (let i = left; i < right; i++) {\r\n        if (arr[i].jobKeywords > arr[pivot].jobKeywords) {\r\n          swap(arr, i, dividerIndex);\r\n          dividerIndex++;\r\n        }\r\n      }\r\n      swap(arr, pivot, dividerIndex);\r\n      return dividerIndex;\r\n    }\r\n\r\n    function swap(arr, a, b) {\r\n      const temp = arr[a];\r\n      arr[a] = arr[b];\r\n      arr[b] = temp;\r\n    }\r\n\r\n    quicksortByJobKeywords(keywordsArray, 0, keywordsArray.length - 1);\r\n    const statusMessage = 'Finished parsing the description. The category with the most keywords in this job description is: ' + keywordsArray[0].keyword + ' with ' + keywordsArray[0].jobKeywords + ' keywords.';\r\n    this.statusMessageService.newStatusMessage(statusMessage, 'success');\r\n    return keywordsArray;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class StatusMessageService {\n\n  statusMessageStream: BehaviorSubject<any> = new BehaviorSubject(undefined);\n\n  constructor() { }\n\n  getStatusMessageStream() {\n    return this.statusMessageStream.asObservable();\n  }\n\n  newStatusMessage(status, cssClass) {\n    this.statusMessageStream.next({\n      status: status,\n      cssClass: cssClass\n    });\n  }\n\n  clearStatus() {\n    this.statusMessageStream.next({\n      status: '',\n      cssClass: ''\n    });\n  }\n\n}\n","module.exports = \"#status {\\r\\n    width:100%;\\r\\n    max-width:38em;\\r\\n    padding: 0px 15px;\\r\\n    border:1px solid #c9c9c9;\\r\\n    text-align:left;\\r\\n    color:#c9c9c9;\\r\\n    border-radius:3px;\\r\\n    margin:20px 0 0 -13px;\\r\\n    background-color: rgba(200,200,200,.3);\\r\\n    position: fixed;\\r\\n    bottom: 0px;\\r\\n    box-sizing: border-box;\\r\\n}\\r\\n\\r\\n#status.success {\\r\\n    color:green;\\r\\n    border-color:green;\\r\\n    background-color:#9bca9b;\\r\\n}\\r\\n\\r\\n#status.error {\\r\\n    color: #c14242;\\r\\n    border-color: #b54242;\\r\\n    background-color: #5a2c2c;\\r\\n}\\r\\n\\r\\n#status.primary {\\r\\n    color: #8fcef3;\\r\\n    border-color: #596c77;\\r\\n    background-color: #596c77;\\r\\n}\\r\\n\\r\\n#status.warning {\\r\\n    color: #856404;\\r\\n    background-color: #fff3cd;\\r\\n    border-color: #ffeeba;\\r\\n}\\r\\n\"","module.exports = \"<div id=\\\"status\\\" *ngIf=\\\"statusMessage !== ''\\\" [ngClass]=\\\"statusClass\\\">\\n<p>\\n  {{statusMessage}}\\n</p>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { StatusMessageService } from '../services/status-message.service';\n\n@Component({\n  selector: 'app-status-message',\n  templateUrl: './status-message.component.html',\n  styleUrls: ['./status-message.component.css']\n})\n\nexport class StatusMessageComponent implements OnInit {\n  statusMessage:String = \"\";\n  statusClass:String = \"primary\";\n  constructor(private statusMessageService:StatusMessageService) { }\n\n  ngOnInit() {\n    let statusObservable = this.statusMessageService.getStatusMessageStream();\n    statusObservable.subscribe(d => {\n      if (d !== undefined) {\n        this.statusMessage = d.status;\n        this.statusClass = d.cssClass;\n      }\n    });\n  }\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}